<div data-animation="default" class="nav_component w-nav" data-easing2="ease" fs-scrolldisable-element="smart-nav" data-easing="ease" data-collapse="medium" data-w-id="9132635a-7891-b0d1-9b20-ecb0d5a86df9" role="banner" data-duration="400" x-data="">
          <div class="nav_container">
            <nav role="navigation" class="nav_menu w-nav-menu">
              {% for link in linklists['main-menu'].links %}    <div li-for="link in linklists['main-menu'].links" class="menu-container">
                                    
                
                            <a li-object:href="link.url" href="{{ link.url }}" class="nav_link-item w-inline-block">
                  <div>
                    <div href="#" data-w-id="b711139a-17b3-0b5d-1871-b930fca17f09" class="link-block-8">
                      <div class="clip-3">
                        <div class="hover-text-4">
                          <div li-object="link.title">{{ link.title }}</div>
                        </div>
                        <div class="hover-text-4 bottom">
                          <div li-object="link.title">{{ link.title }}</div>
                        </div>
                      </div>
                    </div>
                  </div>
                </a>
                            
              
                        </div>
{% endfor %}
            </nav>
            <a href="{{ routes.root_url }}" li-object:href="routes.root_url" class="nav_logo-link w-nav-brand">{% if section.settings.image_logo %}
{{ section.settings.image_logo | image_url: width: 1000 | image_tag: loading: 'lazy', class: 'navbar2_logo is-desktop' }}
{% else %}
<img loading="lazy" alt="" src="{{ 'Logo_1Logo.webp' | asset_url }}" class="navbar2_logo is-desktop">
{% endif %}{% if section.settings.image_mobile_logo %}
{{ section.settings.image_mobile_logo | image_url: width: 1000 | image_tag: loading: 'lazy', class: 'navbar2_logo is-mobile' }}
{% else %}
<img loading="lazy" alt="" src="{{ 'Mobile-Logo_1Mobile-Logo.webp' | asset_url }}" class="navbar2_logo is-mobile">
{% endif %}</a>
            <div class="split-contant navbar-right">
              <div class="nav_shop-icons">
                {% if shop.customer_accounts_optional %}    <div li-if="shop.customer_accounts_optional" class="nav_account">
    
                  <a href="{% if customer %}{{ routes.account_url }}{% else %}{{ routes.account_login_url }}{% endif %}" class="nav_shop-icon w-inline-block"><img loading="lazy" src="{{ 'svgexport-5.svg' | asset_url }}" alt="" class="cart-icon"></a>
                    </div>
{% endif %}
                <div class="nav_mini-cart">
                  <script>
    document.addEventListener('alpine:init', () => {

    Alpine.data('handleMinicart', () => ({
        init() {
            console.log('handleMinicart init')
        },
        cart: {
            note: null,
            attributes: {},
            items: [],
            currency: window.Shopify.currency.active,
            cart_level_discount_applications: [],
            response: {
                result : {},
                show : false,
                timeout : 5000,
            },
            item_count: 0,
            total_price:0,
            total_weight: 0,
            total_discount: 0,
            original_total_price: 0,
            items_subtotal_price: 0
        },
        _abortController : null,
        initAbortController() {
            if(this._abortController) {
                this._abortController.abort('abort previous request');
            }
            this._abortController = new AbortController()
        },
        getAbortControllerSignal() {
            return this._abortController.signal
        },
        resetAbortController() {
            this._abortController = null;
        },
        toggleMiniCart() {
            console.log('(minicart.js) toggleMiniCart called');

            LiquifyHelper.handleTriggerClick();

            this.getCart();
        },

        /**
         * Get the cart data.
         */
        async getCart() {
            this.initAbortController()
            await fetch(window.Shopify.routes.root + 'cart.js', {
                method: 'GET',
                signal: this.getAbortControllerSignal(),
                headers: {'Content-Type': 'application/json'},
            })
                .then(response => response.json())
                .then(data => {
                    this.resetAbortController();

                    this.cart.item_count = data.item_count;

                    this.cart.items = data.items.map((item) => {
                        item.title = this.htmlspecialchars_decode(item.title)
                        return item
                    })


                    this.cart.total_price = data.total_price;
                    this.cart.total_weight = data.total_weight;
                    this.cart.total_discount = data.total_discount;

                    this.$dispatch('carttotalitems', data.item_count);
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
        },

        /**
         * @param key
         * @param quantity
         */
        increaseCartItemQuantity(key, quantity) {
            this.updateCartItemQuantity(key, parseInt(quantity) + 1);
        },

        /**
         * @param key
         * @param quantity
         */
        decreaseCartItemQuantity(key, quantity) {
            this.updateCartItemQuantity(key, parseInt(quantity) - 1);
        },

        /**
         * Update the cart item.
         *
         * @param key
         * @param quantity
         */
        updateCartItemQuantity(key, quantity) {
            this.initAbortController();
            console.log('updateCartItemQuantity(): key, quantity: ', key, quantity);
            this.cart.items.filter((product)  => {
                if(product.key === key) {
                    product.quantity = quantity
                }
            })
            let updates = {};
            updates[key] = quantity;
            fetch(window.Shopify.routes.root + 'cart/update.js', {
                method: 'POST',
                signal: this.getAbortControllerSignal(),
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ updates }),
            })
                .then(response => response.json())
                .then(data => {
                    this.resetAbortController();
                    console.log('updateCartItemQuantity(): ', data);

                    this.$dispatch('cartupdated');
                    this.$dispatch('showcartmessage', { status: data.status, message: data.message, description: data.description });
                })
                .catch((error) => {
                    console.error('Error:', error);
                    this.$dispatch('showcartmessage', { status: error?.status, message: error, description: error });
                });
        },

        /**
         * Format monetary values.
         */
        moneyFormat(value, minor = true) {
            return LiquifyHelper.moneyFormat(value, minor)
        },

        htmlspecialchars_decode(string) {
            return LiquifyHelper.htmlspecialchars_decode(string)
        },

        /**
         * Shows the minicart api message
         * @param event
         */
        showCartMessage(event) {
            //console.log("dispatched showCartMessage", event)
            if(event?.detail?.status) {
                this.cart.response.result = event.detail ?? {}
                this.cart.response.show = true
                setTimeout(() => {
                    this.cart.response.result = {};
                    this.cart.response.show = false
                }, this.cart.response.timeout ?? 5000)
            }
        },

        async returnCartItems() {
            await this.getCart();

            this.$dispatch('currentcartitems', this.cart.items);
        },

        /**
         * @deprecated
         */
        set open(open) { // deprecated use  LiquifyHelper instead
            //console.warn('Deprecated "set open" in mini_cart')
        },
        /**
         * @deprecated
         */
        get open() { // deprecated use  LiquifyHelper instead
            //console.warn('Deprecated "get open" in mini_cart')
            return false;
        },
        /**
         * @deprecated
         */
        set note(note) { // deprecated
            //console.warn('Deprecated "set note" in mini_cart')
            this.cart.note = note;
        },
        /**
         * @deprecated
         */
        get note() { // deprecated
            //console.warn('Deprecated "get note" in mini_cart')
            return this.cart.note;
        },
        /**
         * @deprecated
         */
        set attributes(attributes) { // deprecated
            //console.warn('Deprecated "set attributes" in mini_cart')
            this.cart.attributes = attributes;
        },
        /**
         * @deprecated
         */
        get attributes() { // deprecated
            //console.warn('Deprecated "get attributes" in mini_cart')
            return this.cart.attributes;
        },
        /**
         * @deprecated
         */
        set original_total_price(original_total_price) { //deprecated
            //console.warn('Deprecated "set original_total_price" in mini_cart')
            this.cart.original_total_price = original_total_price;
        },
        /**
         * @deprecated
         */
        get original_total_price() { //deprecated
            //console.warn('Deprecated "get original_total_price" in mini_cart')
            return this.cart.original_total_price;
        },
        /**
         * @deprecated
         */
        set total_price(total_price) { //deprecated
            //console.warn('Deprecated "set total_price" in mini_cart')
            this.cart.total_price = total_price;
        },
        /**
         * @deprecated
         */
        get total_price() { //deprecated
            //console.warn('Deprecated "get total_price" in mini_cart')
            return this.cart.total_price;
        },
        /**
         * @deprecated
         */
        set total_discount(total_discount) { //deprecated
            //console.warn('Deprecated "set total_discount" in mini_cart')
            this.cart.total_discount = total_discount;
        },
        /**
         * @deprecated
         */
        get total_discount() { //deprecated
            //console.warn('Deprecated "get total_discount" in mini_cart')
            return this.cart.total_discount;
        },
        /**
         * @deprecated
         */
        set total_weight(total_weight) { //deprecated
            //console.warn('Deprecated "set total_weight" in mini_cart')
            this.cart.total_discount = total_weight;
        },
        /**
         * @deprecated
         */
        get total_weight() { //deprecated
            //console.warn('Deprecated "get total_weight" in mini_cart')
            return this.cart.total_weight;
        },
        /**
         * @deprecated
         */
        set item_count(item_count) { //deprecated
            //console.warn('Deprecated "set item_count" in mini_cart')
            this.cart.total_discount = item_count;
        },
        /**
         * @deprecated
         */
        get item_count() { //deprecated
            //console.warn('Deprecated "get item_count" in mini_cart')
            return this.cart.item_count;
        },
        /**
         * @deprecated
         */
        set items_subtotal_price(items_subtotal_price) { //deprecated
            //console.warn('Deprecated "set items_subtotal_price" in mini_cart')
            this.cart.items_subtotal_price = items_subtotal_price;
        },
        /**
         * @deprecated
         */
        get items_subtotal_price() { //deprecated
            //console.warn('Deprecated "get items_subtotal_price" in mini_cart')
            return this.cart.items_subtotal_price;
        },
        /**
         * @deprecated
         */
        set products(products) {
            //console.warn('Deprecated "set products" in mini_cart')
            this.cart.items = products;
        },
        /**
         * @deprecated
         */
        get products() {
            //console.warn('Deprecated "get products" in mini_cart')
            return this.cart.items;
        },
        /**
         * @deprecated
         */
        set requires_shipping(requires_shipping) {
            //console.warn('Deprecated "set requires_shipping" in mini_cart')
        },
        /**
         * @deprecated
         */
        get requires_shipping() {
            //console.warn('Deprecated "get requires_shipping" in mini_cart')
            return false;
        },
        /**
         * @deprecated
         */
        set currency(currency) { //deprecated
            //console.warn('Deprecated "set currency" in mini_cart')
            this.cart.currency = currency;
        },
        /**
         * @deprecated
         */
        get currency() { //deprecated
            //console.warn('Deprecated "get currency" in mini_cart')
            return this.cart.currency;
        },
        /**
         * @deprecated
         */
        set cart_level_discount_applications(cart_level_discount_applications) { //deprecated
            //console.warn('Deprecated "set cart_level_discount_applications" in mini_cart')
            this.cart.cart_level_discount_applications = cart_level_discount_applications;
        },
        /**
         * @deprecated
         */
        get cart_level_discount_applications() { //deprecated
            //console.warn('Deprecated "get cart_level_discount_applications" in mini_cart')
            return this.cart.cart_level_discount_applications;
        },
        /**
         * @deprecated
         */
        set cartApiResponse(cartApiResponse) { //deprecated
            //console.warn('Deprecated "set cartApiResponse" in mini_cart')
            this.cart.cartApiResponse = cartApiResponse;
        },
        /**
         * @deprecated
         */
        get cartApiResponse() { //deprecated
            //console.warn('Deprecated "get cartApiResponse" in mini_cart')
            return this.cart.response;
        },
        /**
         * @deprecated
         */
        set total(total) { //deprecated
            //console.warn('Deprecated "set total" in mini_cart')
            this.cart.item_count = total.items;
            this.cart.total_price = total.price;
            this.cart.total_weight = total.weight;
            this.cart.total_discount = total.discount;
        },
        /**
         * @deprecated
         */
        get total() { //deprecated
            //console.warn('Deprecated "get total" in mini_cart')
            return {
                items: this.cart.item_count,
                price: this.cart.total_price,
                weight: this.cart.total_weight,
                discount: this.cart.total_discount,
            };
        }
    }))


});

</script>
<div data-hover="false" data-delay="0" li-element="mini-cart" class="nav_dropdown w-dropdown" x-data="handleMinicart()" x-init="getCart()" @cartupdated.window="getCart()" @setcartitem.window="updateCartItemQuantity($event.detail.product, $event.detail.quantity)" @increasecartitem.window="increaseCartItemQuantity($event.detail.product, $event.detail.quantity)" @decreasecartitem.window="decreaseCartItemQuantity($event.detail.product, $event.detail.quantity)" @toggleminicart.window="toggleMiniCart()" @showcartmessage.window="showCartMessage" @getcartitems.window="returnCartItems">
                    <div li-element="mini-cart-toggle" class="nav_shop-icon w-dropdown-toggle" @click="$dispatch('cartupdated.window')"><img loading="lazy" src="{{ 'CartIcon2.svg' | asset_url }}" alt="" class="cart-icon">
                      <div li-element="mini-cart-item-count" class="cart_count" x-data="{ items: 0 }" x-text="items" @carttotalitems.window="items = event.detail">1</div>
                    </div>
                    <nav li-element="mini-cart-container" class="nav_mini-cart-holder w-dropdown-list" :class="open || 'mini-cart-closed'">
                      <div li-element="dropdown-toggle" class="nav_mini-cart-close" data-dropdowntoggle="" @click="LiquifyHelper.triggerClick($event.target.closest('.w-dropdown').querySelector('.w-dropdown-toggle.w--open'))"></div>
                      <div class="mini-cart_component">
                        <div li-element="mini-cart-full" class="mini-cart_full" :style="total.items < 1 && { display: 'none' }">
                          <div class="mini-cart_header">
                            <div class="heading-style-h3">Cart</div><button li-element="dropdown-toggle" aria-label="Close Cart" class="nav_dropdown-close-button" data-dropdowntoggle="" @click="LiquifyHelper.triggerClick($event.target.closest('.w-dropdown').querySelector('.w-dropdown-toggle.w--open'))">
                              <div class="nav_dropdown-close-icon w-embed"><svg width="15" height="15" viewbox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                                  <path d="M1.84775 14.178L0.447754 12.778L6.04775 7.17798L0.447754 1.57798L1.84775 0.177979L7.44775 5.77798L13.0478 0.177979L14.4478 1.57798L8.84775 7.17798L14.4478 12.778L13.0478 14.178L7.44775 8.57798L1.84775 14.178Z" fill="currentColor"></path>
                                </svg></div>
                            </button>
                          </div>
                          <div class="li-component_wrapper">
                            <div x-data="{ freeShipping: {{ section.settings.free_shipping }} }" class="mini-cart_footer-2">
                              <div x-bind:style="'display: ' + (((freeShipping - total.price) / 100) < 0 ? 'none' : 'block')" class="mini-cart_footer_progress-component">
                                <div class="mini-cart_footer_progress-bar">
                                  <div x-bind:style="'width: ' + (total_price/freeShipping) *100 + '%'" class="mini-cart_footer_progress-bar-innner"></div>
                                </div>
                                <div class="text-size-small">Only <span li-js-price="freeShipping - total_price" x-text="LiquifyHelper.moneyFormat(freeShipping - total_price, true, '{{ shop.money_with_currency_format }}')">$52.75</span> more and then your shipping is free!</div>
                              </div>
                              <div x-bind:style="'display: ' + (((freeShipping - total_price) / 100) < 0 ? 'block' : 'none')" class="mini-cart_footer_progress-component">
                                <div class="heading-style-h4-4">
{{ section.settings.text_success_headline }}
</div>
                                <div class="spacer-tiny-2"></div>
                                <div class="text-size-small">
{{ section.settings.text_success_text }}
</div>
                              </div>
                              
                            </div>
                          </div>
                          <div class="mini-cart_line-item no-scrollbar">
                            <ul role="list" class="mini-cart_line-item_list w-list-unstyled">
                              <template x-for="product in products" :key="product.key">
    <li li-element="mini-cart-item" class="mini-cart_line-item_item"><img src="../images/product-apparel-2.svg" loading="lazy" alt="" class="mini-cart_line-item_img" x-bind:src="product.image">
                                <div class="mini-cart_line-item_product-info">
                                  <div li-js-object="product.title" class="text-size-regular text-weight-bold" x-text="product.title">Product Title</div>
                                  <div class="mini-cart_line-item_price">
                                    <div li-js-price="product.price" class="text-size-small" x-text="LiquifyHelper.moneyFormat(product.price, true, '{{ shop.money_with_currency_format }}')">14,99 $</div>
                                    <template x-if="product.price < product.original_price">
            <div li-js-if="product.price < product.original_price">
        
                                      <div li-js-price="product.original_price" class="text-size-small text-style-strikethrough text-style-muted" x-text="LiquifyHelper.moneyFormat(product.original_price, true, '{{ shop.money_with_currency_format }}')">14,99 $</div>
                                            </div>
    </template>
                                  </div>
                                  <div class="mini-cart_line-item_quantity">
                                    <a li-element="mini-cart-item-decrease" href="#" class="mini-cart_line-item_quantity-adjust" :productprop="product" @click="$dispatch('decreasecartitem', { product: product.key, quantity: product.quantity, action: 'decrease' })">-</a><input li-element="mini-cart-item-quantity" class="mini-cart_line-item_quantity-adjust" value="1" :productprop="product" @input="$dispatch('setcartitem', { product: product.key, quantity: product.quantity })" x-model="product.quantity">
                                    <a li-element="mini-cart-item-increase" href="#" class="mini-cart_line-item_quantity-adjust" :productprop="product" @click="$dispatch('increasecartitem', { product: product.key, quantity: product.quantity, action: 'increase' })">+</a>
                                  </div>
                                  <div li-element="mini-cart-item-remove" class="text-size-tiny text-color-grey" :productprop="product" @click="$dispatch('setcartitem', { product: product.key, quantity: 0 })">Remove</div>
                                </div>
                              </li></template>
                            </ul>
                          </div>
                          <div class="mini-cart_footer">
                            <div class="mini-cart_footer-total">
                              <div class="text-size-regular text-weight-bold">Subtotal</div>
                              <div class="mini-cart_footer-price">
                                <div li-js-price="total.price" class="text-size-regular text-weight-bold" x-text="LiquifyHelper.moneyFormat(total.price, true, '{{ shop.money_with_currency_format }}')">14,99 $</div>
                                <template x-if="total.price < original_total_price">
            <div li-js-if="total.price < original_total_price" class="mini-cart_conditional">
        
                                  <div li-js-price="original_total_price" class="text-size-regular text-weight-bold text-style-strikethrough text-style-muted" x-text="LiquifyHelper.moneyFormat(original_total_price, true, '{{ shop.money_with_currency_format }}')">14,99 $</div>
                                        </div>
    </template>
                              </div>
                            </div>
                            <div li-element="mini-cart-api-response" class="mini-cart_footer-message hide">
                              <div class="mini-cart_footer-message-item">
                                <div class="text-size-regular text-weight-bold">Message</div>
                                <div li-js-object="cartApiResponse?.result?.message" class="text-size-regular text-weight-bold" x-text="cartApiResponse?.result?.message">14,99 $</div>
                              </div>
                            </div>
                            <a x-bind:href="'/checkout'" href="https://lionsmanenootropic.myshopify.com/cart/add?id[]=48706333049112&quantity[]=1" class="button2 is-v2 w-inline-block">
                              <div class="button5_inner is-v2">
                                <div class="button2_text">Checkout</div>
                                <div class="button2_icon-wrap"><img loading="lazy" src="{{ 'button2-arrow.svg' | asset_url }}" alt="" class="button2_icon"></div>
                              </div>
                              <div class="button5_gradient is-v2"></div>
                              <div bind="90e0e776-af58-4836-0cc8-837fb6f002e5" class="custom-styles hide w-embed">
                                <style>
	html {
		font-size: 16px;
	}
	h1, .heading-style-h1 {
		font-size: 2.01em;
	}
	h2, .heading-style-h2 {
		font-size: 1.75em;
	}
	h3, .heading-style-h3 {
		font-size: 1.52em;
	}
	h4, .heading-style-h4 {
		font-size: 1.32em;
	}
	h5, .heading-style-h5 {
		font-size: 1.15em;
	}
	@media (min-width: 478px) {
		html {
			font-size: calc(16px + 0 * ((100vw - 478px) / 514));
		}
	}
	@media (min-width: 992px) {
		html {
			font-size: 16px;
		}
		h1, .heading-style-h1 {
			font-size: 3.71em;
		}
		h2, .heading-style-h2 {
			font-size: 2.86em;
		}
		h3, .heading-style-h3 {
			font-size: 2.2em;
		}
		h4, .heading-style-h4 {
			font-size: 1.69em;
		}
		h5, .heading-style-h5 {
			font-size: 1.3em;
		}
	}
	@media (min-width: 1440px) {
		html {
			font-size: calc(16px + 2 * ((100vw - 1440px) / 480));
		}
	}
	@media (min-width: 1920px) {
		html {
			font-size: 18px;
		}
	}
a {
	color: white;
  text-decoration: none;
}	
.button2 .button2_icon-wrap {
	left: calc(100% - 0.5em);
  transform: translateX(-100%);
  transition: all 500ms cubic-bezier(0.215, 0.610, 0.355, 1.000);
}
.button2:hover .button2_icon-wrap {
	left: 0.5em;
  transform: translateX(0);
  background: rgba(255,255,255,0);
}
.button2 .button2_text {
	position:relative;
	left:0;
  transition: all 500ms cubic-bezier(0.215, 0.610, 0.355, 1.000);
}
.button2:hover .button2_text {
	left:3.5em;
}
.button2 .button2_icon {
	filter: invert(0%);
  transition: all 500ms cubic-bezier(0.215, 0.610, 0.355, 1.000);
}
.button2:hover .button2_icon {
	filter: invert(100%);
}
</style>
                              </div>
                            </a>
                            <div class="price-securepayment_wrap"><img loading="lazy" src="{{ 'Padlock-icon.svg' | asset_url }}" alt="" class="price-padlock-icon">
                              <div class="text-size-regular-5 text-weight-bold">Secure payment</div>
                            </div>
                          </div>
                        </div>
                        <div li-cloak="hide" li-element="mini-cart-empty" class="mini-cart_empty" :style="total.items && { display: 'none' }">
                          <div class="mini-cart_header">
                            <div class="heading-style-h3">Cart</div><button li-element="dropdown-toggle" aria-label="Close Cart" class="nav_dropdown-close-button" data-dropdowntoggle="" @click="LiquifyHelper.triggerClick($event.target.closest('.w-dropdown').querySelector('.w-dropdown-toggle.w--open'))">
                              <div class="nav_dropdown-close-icon w-embed"><svg width="15" height="15" viewbox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                                  <path d="M1.84775 14.178L0.447754 12.778L6.04775 7.17798L0.447754 1.57798L1.84775 0.177979L7.44775 5.77798L13.0478 0.177979L14.4478 1.57798L8.84775 7.17798L14.4478 12.778L13.0478 14.178L7.44775 8.57798L1.84775 14.178Z" fill="currentColor"></path>
                                </svg></div>
                            </button>
                          </div>
                          <div class="mini-cart_empty-content">
                            <div class="text-size-regular">No Products selected</div>
                          </div>
                        </div>
                      </div>
                    </nav>
                  </div>
                </div>
              </div>
            </div>
            <div class="nav_menu-button w-nav-button">
              <div class="menu-icon">
                <div class="menu-icon_line-top"></div>
                <div class="menu-icon_line-middle">
                  <div class="menu-icon_line-middle-inner"></div>
                </div>
                <div class="menu-icon_line-bottom"></div>
              </div>
            </div>
          </div>
        </div> {% schema %} {
    "tag": "div",
    "name": "Header",
    "class": "section_navbar",
    "settings": [
        {
            "id": "image_logo",
            "type": "image_picker",
            "label": "Logo"
        },
        {
            "id": "image_mobile_logo",
            "type": "image_picker",
            "label": "Mobile Logo"
        },
        {
            "id": "text_success_headline",
            "type": "text",
            "label": "Success - Headline",
            "default": "Congratulations \ud83c\udf89"
        },
        {
            "id": "text_success_text",
            "type": "text",
            "label": "Success - Text",
            "default": "Nice one! You\u2019ve unlocked free shipping!"
        },
        {
            "type": "header",
            "content": "free_shipping"
        },
        {
            "type": "text",
            "id": "free_shipping",
            "label": "Free Shipping",
            "default": "100"
        },
        {
            "type": "header",
            "content": "Navigation"
        },
        {
            "type": "link_list",
            "id": "menu",
            "label": "Menu",
            "default": "main-menu"
        }
    ],
    "presets": [
        {
            "name": "Header",
            "category": "Liquify",
            "blocks": []
        }
    ],
    "enabled_on": {
        "groups": [
            "*"
        ]
    }
} {% endschema %}